use serde::{Serialize, Deserialize};
use std::collections::HashMap;

#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct JsonSchema {
    /// A description of this object.
    pub description: Option<String>,

    /// An additional regular expression or key that helps constrain the value.
    /// http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
    pub format: Option<String>,

    /// Values this parameter may take (if it is an enum).
    #[serde(rename = "enum")]
    pub enum_: Option<Vec<String>>,

    /// In a variant data type, the value of one property is used to determine
    /// how to interpret the entire entity. Its value must exist in a map of
    /// discriminant values to schema names.
    pub variant: Option<JsonSchemaVariant>,

    /// The descriptions for the enums.
    /// Each position maps to the corresponding value in the "enum" array.
    #[serde(rename = "enumDescriptions")]
    pub enum_descriptions: Option<Vec<String>>,

    /// The value is read-only, generated by the service. The value cannot be
    /// modified by the client. If the value is included in a POST, PUT, or
    /// PATCH request, it is ignored by the service.
    #[serde(rename = "readOnly")]
    pub read_only: Option<bool>,

    /// The minimum value of this parameter.
    pub minimum: Option<String>,

    /// Whether this parameter may appear multiple times.
    pub repeated: Option<bool>,

    /// Unique identifier for this schema.
    pub id: Option<String>,

    /// A reference to another schema.
    /// The value of this property is the "id" of another schema.
    #[serde(rename = "$ref")]
    pub ref_: Option<String>,

    /// The default value of this property (if one exists).
    pub default: Option<String>,

    /// If this is a schema for an array, this property is the schema for each element in the array.
    pub items: Option<Option<Box<JsonSchema>>>,

    /// Whether the parameter is required.
    pub required: Option<bool>,

    /// The maximum value of this parameter.
    pub maximum: Option<String>,

    /// If this is a schema for an object, list the schema for each property of this object.
    pub properties: Option<HashMap<String, JsonSchema>>,

    /// Whether this parameter goes in the query or the path for REST requests.
    pub location: Option<String>,

    /// The regular expression this parameter must conform to.
    /// Uses Java 6 regex format:
    /// http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
    pub pattern: Option<String>,

    /// If this is a schema for an object, this property is the schema for any
    /// additional properties with dynamic keys on this object.
    #[serde(rename = "additionalProperties")]
    pub additional_properties: Option<Option<Box<JsonSchema>>>,

    /// The value type for this schema. A list of values can be found here:
    /// http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
    #[serde(rename = "type")]
    pub type_: Option<JsonSchemaType>,

    /// Additional information about this property.
    pub annotations: Option<JsonSchemaAnnotations>,
}

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum JsonSchemaType {
    Array,
    Boolean,
    Integer,
    Null,
    Number,
    Object,
    String
}

#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct JsonSchemaVariant {
    /// The map of discriminant value to schema to use for parsing.
    pub map: Option<Vec<JsonSchemaVariantMap>>,

    /// The name of the type discriminant property.
    pub discriminant: Option<String>,
}

#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct JsonSchemaAnnotations {
    /// A list of methods for which this property is required on requests.
    pub required: Option<Vec<String>>,
}

#[derive(Default, Clone, Debug, Serialize, Deserialize)]
pub struct JsonSchemaVariantMap {
    pub type_value: Option<String>,

    #[serde(rename="$ref")]
    pub ref_: Option<String>,
}
